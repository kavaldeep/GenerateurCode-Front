# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE the front end`

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: lateral-rider-383313
  GAR_LOCATION: europe-west8 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: autopilot-cluster-1	   # TODO: update to cluster name
  GKE_ZONE:  europe-central2 # TODO: update to cluster zone
  DEPLOYMENT_NAME: front-end-deployment # TODO: update to deployment name
  REPOSITORY: pormotion # TODO: update to Artifact Registry docker repository
  IMAGE : frontend  # TODO: update to docker image name

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
#    - id: 'auth'
#      name: 'Authenticate to Google Cloud'
#      uses: 'google-github-actions/auth@v1'
#     with:
#        token_format: 'access_token'
#        workload_identity_provider: 'projects/139868670452/locations/global/workloadIdentityPools/kavaldeepgithubaction/providers/github'
#        service_account: 'github-actions@lateral-rider-383313.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    - id: 'auth'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        credentials_json: '${{ secrets.A }}'

    - name : "output infos" 
      run: |
        echo " my token is ${{ toJson(steps)}}"
        echo " my token is ${{ steps.generate-token.outputs.token }}"
    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://europe-west8-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

    # Build the Docker image  front end
    - name: BuildpApi
      run: |-
        docker build -f Dockerfile \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
 

   # Set up kustomize
    - name: Set up Kustomize
      run: |-
        #entering the kustomization folder
        cd kustomization
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize
   
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        cd kustomization
        ./kustomize edit set image gcr.io/lateral-rider-383313/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
        ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide